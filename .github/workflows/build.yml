name: CI

on:
  schedule:
    - cron: '0 16 * * *' # At 4 PM UTC, which is 11 AM UTC+7
  push:
    branches:
      - main
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
    paths: ['.github/scripts/**','.github/workflows/build.yml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cu', '**/*.cc', '**/*.cxx', '!docs/**', '!.gitignore']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['.github/scripts/**','.github/workflows/build.yml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cu', '**/*.cc', '**/*.cxx', '!docs/**', '!.gitignore']
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  MODEL_URL: https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v0.3-GGUF/resolve/main/tinyllama-1.1b-chat-v0.3.Q2_K.gguf

jobs:
  create-draft-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    steps:
      - name: Extract tag name without v prefix
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV && echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ env.VERSION }}"
          draft: true
          prerelease: false

  ubuntu-amd64-build:
    runs-on: ubuntu-latest
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write

    env:
      OPENBLAS_VERSION: 0.3.23
      OPENCL_VERSION: 2023.04.17
      CLBLAST_VERSION: 1.6.0
      SDE_VERSION: 9.21.1-2023-04-24

    strategy:
      matrix:
        include:
          - build: 'avx512'
            defines: '-DDEBUG=ON -DLLAMA_AVX512=ON'
          # - build: 'clblast'
          #   defines: '-DLLAMA_CLBLAST=ON -DCMAKE_PREFIX_PATH="$env:RUNNER_TEMP/clblast"'
          - build: 'openblas'
            defines: '-DDEBUG=ON -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS -DBLAS_INCLUDE_DIRS="$env:RUNNER_TEMP/openblas/include" -DBLAS_LIBRARIES="$env:RUNNER_TEMP/openblas/lib/openblas.lib"'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build
        id: make_build
        run: |
          cmake -S ./nitro_deps -B ./build_deps/nitro_deps
          make -C ./build_deps/nitro_deps -j $(nproc)
          rm -rf ./build_deps/nitro_deps

          mkdir build && cd build
          cmake ${{ matrix.defines }} .. 
          CC=gcc-8 make -j $(nproc)
          ls -la

      - name: Package
        shell: bash
        run: |
          mkdir -p nitro
          cp build/nitro nitro/
          tar -czvf nitro.tar.gz nitro

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-linux-amd64
          path: ./nitro

      - name: Run e2e testing
        shell: bash
        run: |
          # run e2e testing
          cd nitro
          chmod +x ../.github/scripts/e2e-test-linux-and-mac.sh && ../.github/scripts/e2e-test-linux-and-mac.sh ./nitro ${{ env.MODEL_URL }}

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-linux-amd64-${{ matrix.build }}.tar.gz
          asset_content_type: application/gzip

  ubuntu-amd64-cuda-build:
    runs-on: ubuntu-latest
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write

    strategy:
      matrix:
        cuda: ['12.2.0', '11.7.1']
        build: ['cublas']

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust"]'

      - name: Build
        id: make_build
        run: |
          cmake -S ./nitro_deps -B ./build_deps/nitro_deps
          make -C ./build_deps/nitro_deps -j $(nproc)
          rm -rf ./build_deps/nitro_deps

          mkdir build && cd build
          cmake -DDEBUG=ON -DLLAMA_CUBLAS=ON ..
          CC=gcc-8 make -j $(nproc)
          ls -la

      - name: Package
        shell: bash
        run: |
          mkdir -p nitro
          cp build/nitro nitro/
          tar -czvf nitro.tar.gz nitro

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-linux-amd64-cuda
          path: ./nitro

      - name: Run e2e testing
        shell: bash
        run: |
          # run e2e testing
          cd nitro
          chmod +x ../.github/scripts/e2e-test-linux-and-mac.sh && ../.github/scripts/e2e-test-linux-and-mac.sh ./nitro ${{ env.MODEL_URL }}

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-linux-amd64-${{ matrix.build }}-cu${{ matrix.cuda }}.tar.gz
          asset_content_type: application/gzip

  macOS-M-build:
    runs-on: mac-silicon
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Dependencies
        id: depends
        continue-on-error: true
        run: |
          brew update
          brew install cmake

      - name: Build
        id: cmake_build
        run: |
          ./install_deps.sh
          mkdir build && cd build
          cmake .. 
          CC=gcc-8 make . -j $(sysctl -n hw.ncp)
          ls -la 
  
      - name: Package
        shell: bash
        run: |
          mkdir -p nitro
          cp llama.cpp/ggml-metal.metal nitro/
          cp build/nitro nitro/
          tar -czvf nitro.tar.gz nitro

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-mac-arm64
          path: ./nitro

      - name: Run e2e testing
        shell: bash
        run: |
          # run e2e testing
          cd nitro
          chmod +x ../.github/scripts/e2e-test-linux-and-mac.sh && ../.github/scripts/e2e-test-linux-and-mac.sh ./nitro ${{ env.MODEL_URL }}

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-mac-arm64.tar.gz
          asset_content_type: application/gzip

  macOS-Intel-build:
    runs-on: macos-latest
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Dependencies
        id: depends
        continue-on-error: true
        run: |
          brew update

      - name: Build
        id: cmake_build
        run: |
          ./install_deps.sh
          mkdir build && cd build
          cmake -DLLAMA_METAL=OFF .. 
          CC=gcc-8 make . -j $(sysctl -n hw.ncp)
          ls -la 
    
      - name: Package
        shell: bash
        run: |
          mkdir -p nitro
          cp build/nitro nitro/
          tar -czvf nitro.tar.gz nitro

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-mac-amd64
          path: ./nitro

      - name: Run e2e testing
        shell: bash
        run: |
          # run e2e testing
          cd nitro
          chmod +x ../.github/scripts/e2e-test-linux-and-mac.sh && ../.github/scripts/e2e-test-linux-and-mac.sh ./nitro ${{ env.MODEL_URL }}

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-mac-amd64.tar.gz
          asset_content_type: application/gzip

  windows-amd64-build:
    runs-on: windows-latest
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write

    env:
      OPENBLAS_VERSION: 0.3.23
      OPENCL_VERSION: 2023.04.17
      CLBLAST_VERSION: 1.6.0
      SDE_VERSION: 9.21.1-2023-04-24

    strategy:
      matrix:
        include:
          - build: 'avx512'
            defines: '-DDEBUG=ON  -DLLAMA_AVX512=ON'
          # - build: 'clblast'
          #   defines: '-DLLAMA_CLBLAST=ON -DCMAKE_PREFIX_PATH="$env:RUNNER_TEMP/clblast"'
          - build: 'openblas'
            defines: '-DDEBUG=ON  -DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS -DBLAS_INCLUDE_DIRS="$env:RUNNER_TEMP/openblas/include" -DBLAS_LIBRARIES="$env:RUNNER_TEMP/openblas/lib/openblas.lib"'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download OpenCL SDK
        id: get_opencl
        if: ${{ matrix.build == 'clblast' }}
        run: |
          curl.exe -o $env:RUNNER_TEMP/opencl.zip -L "https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v${env:OPENCL_VERSION}/OpenCL-SDK-v${env:OPENCL_VERSION}-Win-x64.zip"
          mkdir $env:RUNNER_TEMP/opencl
          tar.exe -xvf $env:RUNNER_TEMP/opencl.zip --strip-components=1 -C $env:RUNNER_TEMP/opencl

      - name: Download CLBlast
        id: get_clblast
        if: ${{ matrix.build == 'clblast' }}
        run: |
          curl.exe -o $env:RUNNER_TEMP/clblast.7z -L "https://github.com/CNugteren/CLBlast/releases/download/${env:CLBLAST_VERSION}/CLBlast-${env:CLBLAST_VERSION}-windows-x64.7z"
          curl.exe -o $env:RUNNER_TEMP/CLBlast.LICENSE.txt -L "https://github.com/CNugteren/CLBlast/raw/${env:CLBLAST_VERSION}/LICENSE"
          7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/clblast.7z
          rename-item $env:RUNNER_TEMP/CLBlast-${env:CLBLAST_VERSION}-windows-x64 clblast
          foreach ($f in (gci -Recurse -Path "$env:RUNNER_TEMP/clblast" -Filter '*.cmake')) {
            $txt = Get-Content -Path $f -Raw
            $txt.Replace('C:/vcpkg/packages/opencl_x64-windows/', "$($env:RUNNER_TEMP.Replace('\','/'))/opencl/") | Set-Content -Path $f -Encoding UTF8
          }

      - name: Download OpenBLAS
        id: get_openblas
        if: ${{ matrix.build == 'openblas' }}
        run: |
          curl.exe -o $env:RUNNER_TEMP/openblas.zip -L "https://github.com/xianyi/OpenBLAS/releases/download/v${env:OPENBLAS_VERSION}/OpenBLAS-${env:OPENBLAS_VERSION}-x64.zip"
          curl.exe -o $env:RUNNER_TEMP/OpenBLAS.LICENSE.txt -L "https://github.com/xianyi/OpenBLAS/raw/v${env:OPENBLAS_VERSION}/LICENSE"
          mkdir $env:RUNNER_TEMP/openblas
          tar.exe -xvf $env:RUNNER_TEMP/openblas.zip -C $env:RUNNER_TEMP/openblas
          $vcdir = $(vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath)
          $msvc = $(join-path $vcdir $('VC\Tools\MSVC\'+$(gc -raw $(join-path $vcdir 'VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt')).Trim()))
          $lib =  $(join-path $msvc 'bin\Hostx64\x64\lib.exe')
          & $lib /machine:x64 "/def:${env:RUNNER_TEMP}/openblas/lib/libopenblas.def" "/out:${env:RUNNER_TEMP}/openblas/lib/openblas.lib" /name:openblas.dll
  
      - name: Setup VSWhere.exe
        uses: warrenbuckley/Setup-VSWhere@v1
        with:
          version: latest
          silent: true
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: actions-setup-cmake
        uses: jwlawson/actions-setup-cmake@v1.14.1

      - name: Build
        id: cmake_build
        shell: cmd
        run: |
          cmake -S ./nitro_deps -B ./build_deps/nitro_deps
          cmake ./build_deps/nitro_deps --config Release

          mkdir -p build && cd build/
          cmake ${{ matrix.defines }} ..
          cmake -j "%NUMBER_OF_PROCESSORS%"

      - name: Pack artifacts
        id: pack_artifacts
        shell: cmd
        run: |
          robocopy build_deps\_install\bin .\build\Release zlib.dll
          robocopy build\bin\Release .\build\Release llama.dll
          7z a -ttar temp.tar .\build\Release\*
          7z a -tgzip nitro.tar.gz temp.tar

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-win-amd64
          path: ./nitro

      - name: Run e2e testing
        shell: cmd
        run: |
          cd .\build\Release
          ..\..\.github\scripts\e2e-test-windows.bat .\nitro.exe ${{ env.MODEL_URL }}

      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-win-amd64-${{ matrix.build }}.tar.gz
          asset_content_type: application/gzip

  windows-amd64-cuda-build:
    runs-on: windows-latest
    needs: create-draft-release
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped')
    permissions:
      contents: write

    strategy:
      matrix:
        cuda: ['12.2.0', '11.7.1']
        build: ['cublas']

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      - name: Setup VSWhere.exe
        uses: warrenbuckley/Setup-VSWhere@v1
        with:
          version: latest
          silent: true
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Build
        id: cmake_build
        shell: cmd
        run: |
          cmake -S ./nitro_deps -B ./build_deps/nitro_deps
          cmake --build ./build_deps/nitro_deps --config Release
          mkdir -p build
          cd build
          cmake .. -DLLAMA_CUBLAS=ON
          cmake -j "%NUMBER_OF_PROCESSORS%"

      - name: Pack artifacts
        id: pack_artifacts
        shell: cmd
        run: |
          set PATH=%PATH%;C:\Program Files\7-Zip\
          robocopy build_deps\_install\bin .\build\Release zlib.dll
          robocopy build\bin\Release .\build\Release llama.dll
          7z a -ttar temp.tar .\build\Release\*
          7z a -tgzip nitro.tar.gz temp.tar

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          name: nitro-win-amd64
          path: ./nitro

      - name: run e2e testing
        shell: cmd
        run: |
          cd .\build\Release
          ..\..\.github\scripts\e2e-test-windows.bat .\nitro.exe ${{ env.MODEL_URL }}
       
      - uses: actions/upload-release-asset@v1.0.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_path: ./nitro.tar.gz
          asset_name: nitro-${{ needs.create-draft-release.outputs.version }}-win-amd64-${{ matrix.build }}-cu${{ matrix.cuda }}.tar.gz
          asset_content_type: application/gzip     
          
  update_release_draft:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [ubuntu-amd64-build, ubuntu-amd64-cuda-build, macOS-M-build, macOS-Intel-build, windows-amd64-build, windows-amd64-cuda-build]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  noti-discord:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [ubuntu-amd64-build, ubuntu-amd64-cuda-build, macOS-M-build, macOS-Intel-build, windows-amd64-build, windows-amd64-cuda-build]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        with:
          args: "Nightly build artifact: https://github.com/janhq/nitro/actions/runs/{{ GITHUB_RUN_ID }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}