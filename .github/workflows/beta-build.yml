name: CI Cortex CPP Beta Build

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"]

jobs:
  # Job create Update app version based on latest release tag with build number and save to output
  get-update-version:
    uses: ./.github/workflows/template-get-update-version.yml

  create-draft-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    steps:
      - name: Extract tag name without v prefix
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV && echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "${{ env.VERSION }}"
          draft: true
          prerelease: false

  build-macos-x64:
    uses: ./.github/workflows/template-build-macos.yml
    needs: [get-update-version, create-draft-release]
    secrets: inherit
    with:
      ref: ${{ github.ref }}
      public_provider: github
      new_version: ${{ needs.get-update-version.outputs.new_version }}
      runs-on: macos-12
      cmake-flags: "-DCORTEX_VARIANT=beta -DCORTEX_CPP_VERSION=${{ needs.get-update-version.outputs.new_version }} -DCMAKE_TOOLCHAIN_FILE=/Users/runner/work/cortex.cpp/cortex.cpp/engine/vcpkg/scripts/buildsystems/vcpkg.cmake"
      channel: beta
      arch: amd64
      upload_url: ${{ needs.create-draft-release.outputs.upload_url }}

  build-macos-arm64:
    uses: ./.github/workflows/template-build-macos.yml
    needs: [get-update-version, create-draft-release]
    secrets: inherit
    with:
      ref: ${{ github.ref }}
      public_provider: github
      new_version: ${{ needs.get-update-version.outputs.new_version }}
      runs-on: macos-latest
      cmake-flags: "-DCORTEX_VARIANT=beta -DCORTEX_CPP_VERSION=${{ needs.get-update-version.outputs.new_version }} -DMAC_ARM64=ON -DCMAKE_TOOLCHAIN_FILE=/Users/runner/work/cortex.cpp/cortex.cpp/engine/vcpkg/scripts/buildsystems/vcpkg.cmake"
      channel: beta
      arch: arm64
      upload_url: ${{ needs.create-draft-release.outputs.upload_url }}

  build-windows-x64:
    uses: ./.github/workflows/template-build-windows-x64.yml
    secrets: inherit
    needs: [get-update-version, create-draft-release]
    with:
      ref: ${{ github.ref }}
      public_provider: github
      new_version: ${{ needs.get-update-version.outputs.new_version }}
      runs-on: windows-cuda-11-7
      cmake-flags: "-DCORTEX_VARIANT=beta -DCORTEX_CPP_VERSION=${{ needs.get-update-version.outputs.new_version }} -DBUILD_SHARED_LIBS=OFF -DCMAKE_TOOLCHAIN_FILE=C:/w/cortex.cpp/cortex.cpp/engine/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache -GNinja"
      build-deps-cmake-flags: "-DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache -GNinja"
      ccache-dir: 'C:\Users\ContainerAdministrator\AppData\Local\ccache'
      channel: beta
      upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          
  build-linux-x64:
    uses: ./.github/workflows/template-build-linux-x64.yml
    secrets: inherit
    needs: [get-update-version, create-draft-release]
    with:
      ref: ${{ github.ref }}
      public_provider: github
      new_version: ${{ needs.get-update-version.outputs.new_version }}
      runs-on: ubuntu-20-04
      cmake-flags: "-DCORTEX_VARIANT=beta -DCORTEX_CPP_VERSION=${{ needs.get-update-version.outputs.new_version }} -DCMAKE_TOOLCHAIN_FILE=/home/runner/actions-runner/_work/cortex.cpp/cortex.cpp/engine/vcpkg/scripts/buildsystems/vcpkg.cmake"
      channel: beta
      upload_url: ${{ needs.create-draft-release.outputs.upload_url }}

  update_release_draft:
    needs: [build-macos-x64, build-macos-arm64, build-windows-x64, build-linux-x64]
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}