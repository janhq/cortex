name: build-windows-x64
on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        default: 'refs/heads/main'
      public_provider:
        required: true
        type: string
        default: none
        description: 'none: build only, github: build and publish to github, aws s3: build and publish to aws s3'
      new_version:
        required: true
        type: string
        default: ''
      upload_url:
        required: true
        type: string
        default: ''
      runs-on:
        required: false
        type: string
        default: 'ubuntu-20-04-cuda-12-0'
        description: 'The runner to use for this job'
      cmake-flags:
        required: false
        type: string
        default: ''
        description: 'The cmake flags to use for this job'
      build-deps-cmake-flags:
        required: false
        type: string
        default: ''
        description: 'The cmake flags to use for this job'
      ccache-dir:
        required: false
        type: string
        default: ''
        description: 'The ccache directory to use for this job'
      channel:
        required: true
        type: string
        default: 'nightly'
        description: 'The channel to use for this job'
    secrets:
      MINIO_BUCKET_NAME:
        required: false
      MINIO_ENDPOINT:
        required: false
      MINIO_ACCESS_KEY_ID:
        required: false
      MINIO_SECRET_ACCESS_KEY:
        required: false
      MINIO_REGION:
        required: false
      DEVELOPER_ID:
        required: false
      AZURE_KEY_VAULT_URI:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_CERT_NAME:
        required: false
      DELTA_AWS_S3_BUCKET_NAME:
        required: false
      DELTA_AWS_ACCESS_KEY_ID:
        required: false
      DELTA_AWS_SECRET_ACCESS_KEY:
        required: false
      DELTA_AWS_REGION:
        required: false

jobs:
  build-windows-x64:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/setup-dotnet@v3
        if: runner.os == 'Windows'
        with:
          dotnet-version: "8.0.x"

      - name: Set output params for each channel
        id : set-output-params
        shell: bash
        run: |
          # Set output for stable channel
          if [ "${{ inputs.channel }}" == "stable" ]; then
            echo "::set-output name=package_name::cortexcpp"
            echo "::set-output name=destination_binary_name::cortex"
            echo "::set-output name=data_folder_name::.cortex"
            echo "::set-output name=configuration_file_name::.cortexrc"
            echo "::set-output name=uninstaller_file_name::cortex-uninstall.sh"
            echo "::set-output name=iss_file_name::installer.iss"
          fi

          # Set output for beta channel
          if [ "${{ inputs.channel }}" == "beta" ]; then
            echo "::set-output name=package_name::cortexcpp-beta"
            echo "::set-output name=destination_binary_name::cortex-beta"
            echo "::set-output name=data_folder_name::.cortex-beta"
            echo "::set-output name=configuration_file_name::.cortexrc-beta"
            echo "::set-output name=uninstaller_file_name::cortex-beta-uninstall.sh"
            echo "::set-output name=iss_file_name::installer-beta.iss"
          fi

          # Set output for nightly channel
          if [ "${{ inputs.channel }}" == "nightly" ]; then
            echo "::set-output name=package_name::cortexcpp-nightly"
            echo "::set-output name=destination_binary_name::cortex-nightly"
            echo "::set-output name=data_folder_name::.cortex-nightly"
            echo "::set-output name=configuration_file_name::.cortexrc-nightly"
            echo "::set-output name=uninstaller_file_name::cortex-nightly-uninstall.sh"
            echo "::set-output name=iss_file_name::installer-nightly.iss"
          fi

      - name: Install jq
        uses: dcarbone/install-jq-action@v2.0.1