export enum ChatCompletionRole {
  System = 'system',
  Assistant = 'assistant',
  User = 'user',
}

export enum ContentType {
  Text = 'text',
  Image = 'image',
  Pdf = 'pdf',
}

export interface ContentValue {
  value: string;
  annotations: string[];
  name?: string;
  size?: number;
}

export interface ThreadContent {
  type: ContentType;
  text: ContentValue;
}

/**
 * The status of the message.
 * @data_transfer_object
 */
export enum MessageStatus {
  /** Message is fully loaded. **/
  Ready = 'ready',
  /** Message is not fully loaded. **/
  Pending = 'pending',
  /** Message loaded with error. **/
  Error = 'error',
  /** Message is cancelled streaming */
  Stopped = 'stopped',
}

/**
 * The error code which explain what error type. Used in conjunction with MessageStatus.Error
 */
export enum ErrorCode {
  InvalidApiKey = 'invalid_api_key',

  InsufficientQuota = 'insufficient_quota',

  InvalidRequestError = 'invalid_request_error',

  Unknown = 'unknown',
}

export interface Message {
  /** Unique identifier for the message, generated by default using the ULID method. **/
  id: string;
  /** Object name **/
  object: string;
  /** Thread id, default is a ulid. **/
  thread_id: string;
  /** The assistant id of this thread. **/
  assistant_id?: string;
  /** The role of the author of this message. **/
  role: ChatCompletionRole;
  /** The content of this message. **/
  content: ThreadContent[];
  /** The status of this message. **/
  status: MessageStatus;
  /** The timestamp indicating when this message was created. Represented in Unix time. **/
  created: number;
  /** The timestamp indicating when this message was updated. Represented in Unix time. **/
  updated?: number;
  /** The additional metadata of this message. **/
  metadata?: MessageMetadata;
  /** The error code which explain what error type. Used in conjunction with MessageStatus.Error */
  error_code?: ErrorCode;
}

/**
 * The additional metadata of this message.
 */
export interface MessageMetadata {}
