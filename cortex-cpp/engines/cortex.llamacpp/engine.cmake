set(LIBLLAMA_ENGINE_VERSION v1.0)

# Download library based on instruction 
# TODO(sang) correct library name when cortex.llamacpp CI is done
if(UNIX AND NOT APPLE) 
  if(CUDA_12_0) 
    set(LIBRARY_NAME linux-amd64-cuda-12-0.tar.gz)
  elseif(CUDA_11_7)
    set(LIBRARY_NAME linux-amd64-cuda-11-7.tar.gz)
  elseif(LLAMA_VULKAN)
    set(LIBRARY_NAME linux-amd64-vulkan.tar.gz)
  elseif(DLLAMA_AVX512)
    set(LIBRARY_NAME linux-amd64-avx512.tar.gz)
  elseif(DLLAMA_AVX2)
    set(LIBRARY_NAME linux-amd64-avx2.tar.gz)
  else()
    set(LIBRARY_NAME linux-amd64-avx.tar.gz)
  endif()
elseif(UNIX)
  set(LIBRARY_NAME mac-universal.tar.gz)
else()
  if(CUDA_12_0)
    if(DLLAMA_AVX512)  
      set(LIBRARY_NAME win-amd64-avx512-cuda-12-0.tar.gz)
    elseif(DLLAMA_AVX2)
      set(LIBRARY_NAME win-amd64-avx2-cuda-12-0.tar.gz)
    else()
      set(LIBRARY_NAME win-amd64-avx-cuda-12-0.tar.gz)
    endif()
  elseif(CUDA_11_7)
    if(DLLAMA_AVX512)  
      set(LIBRARY_NAME win-amd64-avx512-cuda-11-7.tar.gz)
    elseif(DLLAMA_AVX2)
      set(LIBRARY_NAME win-amd64-avx2-cuda-11-7.tar.gz)
    else()
      set(LIBRARY_NAME win-amd64-avx-cuda-11-7.tar.gz)
    endif()
  elseif(LLAMA_VULKAN)
    set(LIBRARY_NAME win-amd64-vulkan.tar.gz)
  elseif(DLLAMA_AVX512)
    set(LIBRARY_NAME win-amd64-avx512.tar.gz)
  elseif(DLLAMA_AVX2)
    set(LIBRARY_NAME win-amd64-avx2.tar.gz)
  else()
    set(LIBRARY_NAME win-amd64-avx.tar.gz)
  endif()
endif()

set(LIBLLAMA_ENGINE_URL https://github.com/.../releases/download/${LIBLLAMA_ENGINE_VERSION}/${LIBRARY_NAME})

set(LIBLLAMA_ENGINE_PATH ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME})

# MESSAGE("CMAKE_BINARY_DIR = " ${CMAKE_BINARY_DIR})

file(DOWNLOAD ${LIBLLAMA_ENGINE_URL} ${LIBLLAMA_ENGINE_PATH} STATUS LIBLLAMA_ENGINE_DOWNLOAD_STATUS)
list(GET LIBLLAMA_ENGINE_DOWNLOAD_STATUS 0 LIBLLAMA_ENGINE_DOWNLOAD_STATUS_NO)
# MESSAGE("file = " ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME})

if(LIBLLAMA_ENGINE_DOWNLOAD_STATUS_NO)
    message(STATUS "Pre-built library not downloaded. (${LIBLLAMA_ENGINE_DOWNLOAD_STATUS})")
else()
    message(STATUS "Linking downloaded pre-built library.")
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME} DESTINATION ${CMAKE_BINARY_DIR}/engines/)
endif()