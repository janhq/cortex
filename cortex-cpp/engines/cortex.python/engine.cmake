# cortex.python release version
set(VERSION 0.1.5)
set(ENGINE_VERSION v${VERSION})
set(ENGINE_NAME cortex.python)

# MESSAGE("ENGINE_VERSION=" ${ENGINE_VERSION})

# Download library based on instructions 
if(UNIX AND NOT APPLE) 
  set(LIBRARY_NAME ${ENGINE_NAME}-${VERSION}-linux-amd64.tar.gz)
elseif(UNIX)
  if(MAC_ARM64) 
    set(LIBRARY_NAME ${ENGINE_NAME}-${VERSION}-mac-arm64.tar.gz)
  else()
    set(LIBRARY_NAME ${ENGINE_NAME}-${VERSION}-mac-amd64.tar.gz)
  endif()
else()
  set(LIBRARY_NAME ${ENGINE_NAME}-${VERSION}-windows-amd64.tar.gz)
endif()


set(LIBPYTHONRUNTIME_ENGINE_URL https://github.com/janhq/cortex.python/releases/download/${ENGINE_VERSION}/${LIBRARY_NAME})
MESSAGE("LIBPYTHONRUNTIME_ENGINE_URL=" ${LIBPYTHONRUNTIME_ENGINE_URL})
MESSAGE("LIBARRY_NAME=" ${LIBRARY_NAME})
set(LIBPYTHONRUNTIME_ENGINE_PATH ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME})

# MESSAGE("CMAKE_BINARY_DIR = " ${CMAKE_BINARY_DIR})

file(DOWNLOAD ${LIBPYTHONRUNTIME_ENGINE_URL} ${LIBPYTHONRUNTIME_ENGINE_PATH} STATUS LIBPYTHONRUNTIME_ENGINE_DOWNLOAD_STATUS)
list(GET LIBPYTHONRUNTIME_ENGINE_DOWNLOAD_STATUS 0 LIBPYTHONRUNTIME_ENGINE_DOWNLOAD_STATUS_NO)
# MESSAGE("file = " ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME})

if(LIBPYTHONRUNTIME_ENGINE_DOWNLOAD_STATUS_NO)
    message(STATUS "Pre-built library not downloaded. (${LIBPYTHONRUNTIME_ENGINE_DOWNLOAD_STATUS})")
else()
    message(STATUS "Linking downloaded pre-built library.")
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_BINARY_DIR}/engines/${LIBRARY_NAME} DESTINATION ${CMAKE_BINARY_DIR}/engines/)
endif()